<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="DefectDAO">
	<resultMap id="PackageHeaderMap" type="java.util.HashMap">
		<result property="java.lang.String" column="row_id" />
		<result property="object" column="PackageBeanResult" />
	</resultMap>

	<!-- 결함 리스트 조회 -->
	<select id="selectDefectList" parameterType="java.util.Map"
		resultMap="PackageHeaderMap">
		SELECT row_number() OVER () as rnum,
		defect.* ,his.defect_code,
		his.test_type,
		sftm.GET_CODENAME('B001', his.defect_code) defect_name,
		sftm.GET_CODENAME('A001', his.test_type) test_type_name,
		to_char(defect.reg_date, 'YYYY-MM-DD') reg_date_str,
		COALESCE(to_char(defect.resolve_date, 'YYYY-MM-DD'), '-') resolve_date_str,
		COALESCE(dev.name, '') defect_user_name,
		COALESCE(reg.name, '')
		reg_name
		FROM sftm.itm_defect defect
		LEFT JOIN sftm.itm_user dev ON
		defect.defect_user = dev.user_id
		LEFT JOIN sftm.itm_user reg ON
		defect.reg_user = reg.user_id
		,sftm.itm_defect_history his
		WHERE 1=1
		AND defect.defect_id = his.defect_id
		AND his.seq = (SELECT MAX(seq) FROM
		sftm.itm_defect_history his2 where defect.defect_id = his2.defect_id)
		<if test="scenario_id != null and scenario_id != ''">
			AND defect.scenario_id = #{scenario_id}::bigint
		</if>
		<if test="case_id != null and case_id != ''">
			AND defect.case_id = #{case_id}::bigint
		</if>

	</select>
	<!-- 사용자 조회 -->
	<select id="selectDefectById" parameterType="int"
		resultMap="PackageHeaderMap">
		SELECT row_number() OVER () as rnum,
		defect.* ,
		his.defect_code,
		his.test_type,
		sftm.GET_CODENAME('B001', his.defect_code) defect_name,
		sftm.GET_CODENAME('A001', his.test_type) test_type_name,
		to_char(defect.reg_date, 'YYYY-MM-DD') reg_date_str
		FROM
		sftm.itm_defect defect
		,sftm.itm_defect_history his
		WHERE 1=1
		AND
		defect.defect_id = his.defect_id
		AND his.seq = (SELECT MAX(seq) FROM
		sftm.itm_defect_history his2 where defect.defect_id = his2.defect_id)
		<if test="defect_id != null and defect_id != ''">
			AND defect.defect_id = #{defect_id}::bigint
		</if>
	</select>
	<!-- 사용자 조회 -->
	<select id="selectDefectId" resultType="java.lang.Integer">
		select
		nextval('sftm.itm_defect_id_seq'::regclass);
	</select>

	<select id="selectTestCaseDevId" resultType="java.lang.String"
		parameterType="java.util.Map">
		SELECT COALESCE(dev_id, '') FROM sftm.itm_test_case
		WHERE case_id = #{
		case_id }::bigint
	</select>

	<insert id="insertDefect" parameterType="map"
		useGeneratedKeys="true">
		INSERT INTO sftm.itm_defect as df
		(
		defect_id ,
		project_id,
		scenario_id,
		case_id,
		title,
		description,
		defect_user,
		reg_user,
		reg_date,
		imgkey
		)
		VALUES (

		#{ defect_id }::bigint,
		(select project_id from sftm.itm_scenario sc where  sc.scenario_id = #{ scenario_id }::bigint),
		#{ scenario_id }::bigint,
		#{ case_id
		}::bigint,
		#{ title },
		#{ description },
		( SELECT dev_id FROM
		sftm.itm_test_case WHERE case_id = #{ case_id
		}::bigint ),
		#{
		cookieUserId },
		now() ,
		#{ imgkey }::bigint
		)
	</insert>


	<!-- <select id="selectDefectHistory" parameterType="java.util.Map" resultMap="PackageHeaderMap"> -->
	<!-- select * -->
	<!-- from sftm.itm_defect_history his -->
	<!-- where 1=1 -->
	<!-- <if test="id != null and id != ''"> -->
	<!-- AND his.id = #{id}::bigint -->
	<!-- </if> -->
	<!-- and his.seq = (select MAX(his2.seq) from sftm.itm_defect_history his2 
		where his.id = his2.id ) -->
	<!-- </select> -->

	<insert id="insertDefectHistory" parameterType="map"
		useGeneratedKeys="true">
		INSERT INTO sftm.itm_defect_history
		(
			defect_id ,
			seq,
			defect_code,
			test_type,
			reg_user,
			reg_date
		)
		VALUES (
			#{ defect_id }::bigint,
			(
				select COALESCE(max(seq), 0)+1 
				FROM sftm.itm_defect_history where
				defect_id=#{ defect_id }::bigint
			),
			#{ defect_code },
			#{ test_type },
			#{ reg_user },
			now()
		)
	</insert>


	<update id="updateDefect" parameterType="map"
		useGeneratedKeys="true">
		UPDATE sftm.itm_defect
		SET title = #{title},
		description = #{description},
		imgkey = #{ imgkey }::bigint
		WHERE
		defect_id = #{defect_id}::bigint
	</update>

	<update id="updateDefectByDev" parameterType="map"
		useGeneratedKeys="true">
		UPDATE sftm.itm_defect
		SET
			defect_result = #{defect_result},
			defect_user = #{defect_user}
			<if test="resolve != null and resolve != ''">
			,resolve_date = now()
			</if>
		WHERE defect_id = #{defect_id}::bigint
	</update>

	<update id="updateDefectDev" parameterType="map"
		useGeneratedKeys="true">
		UPDATE sftm.itm_defect
		SET
			defect_user = #{defect_user}
		WHERE defect_id = #{defect_id}::bigint
	</update>
	
	
	<!-- 사용자 조회 -->
	<select id="selectDefectHistory" parameterType="java.util.Map"
		resultMap="PackageHeaderMap">
		select his.defect_id
		,his.seq
		,sftm.GET_CODENAME('A001',
		his.test_type) as test_type
		,sftm.GET_CODENAME('B001', his.defect_code)
		as defect_code
		,COALESCE(us.name, '자동배정') as name
		,to_char(his.reg_date, 'YYYY-MM-DD HH24:MI') reg_date
		from
		sftm.itm_defect_history his
		LEFT OUTER JOIN sftm.itm_user us
		ON
		his.reg_user = us.user_id
		, sftm.itm_defect df
		where his.defect_id =
		#{defect_id}::bigint
		and his.defect_id = df.defect_id
		order by
		his.reg_date
	</select>
	
	
	<!-- 배치에서 결함처리 오랜시간 지난건들 조회하는 쿼리입니다. -->
	<select id="selectDelayDefect" parameterType="java.util.Map"
		resultMap="PackageHeaderMap">
		select df.defect_id, 
				df.title, 
				df.reg_user, 
				df.defect_user,
				dh.defect_code, 
				dh.reg_user sender,
				dh.reg_date,
				to_char(dh.reg_date, 'YYYY-MM-DD HH24:MI') reg_date_str
		from sftm.itm_defect df, 
		     sftm.itm_defect_history dh
		where df.defect_id = dh.defect_id
		and dh.seq = (select max(seq) from sftm.itm_defect_history idh where dh.defect_id=idh.defect_id)
		and dh.defect_code != 'B001_06'
		order by dh.reg_date
	</select>
			
</mapper>